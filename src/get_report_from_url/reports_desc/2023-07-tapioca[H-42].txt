Type of vulnerability: Smart contract vulnerability
Cause of vulnerability: Lack of validation on input parameters
Execution process: Attacker gains control over the oTAP position and steals assets by manipulating the input parameters in the function _exitPositionAndRemoveCollateral()
Detailed characteristics: Attacker can call the function with malicious parameters to transfer and steal assets without proper authorization
Vulnerable code: 
```solidity
function _exitPositionAndRemoveCollateral(
    address user,
    ICommonData.ICommonExternalContracts calldata externalData,
    IUSDOBase.IRemoveAndRepay calldata removeAndRepayData
) private {
    IMarket bigBang = IMarket(externalData.bigBang);
    ISingularity singularity = ISingularity(externalData.singularity);
    IYieldBoxBase yieldBox = IYieldBoxBase(singularity.yieldBox());
    uint256 tOLPId = 0;
    
    if (removeAndRepayData.exitData.exit) {
        require(removeAndRepayData.exitData.oTAPTokenID > 0, "Magnetar: oTAPTokenID 0");
        address oTapAddress = ITapiocaOptionsBroker(removeAndRepayData.exitData.target).oTAP();
        (, ITapiocaOptions.TapOption memory oTAPPosition) = ITapiocaOptions(oTapAddress).attributes(removeAndRepayData.exitData.oTAPTokenID);
        tOLPId = oTAPPosition.tOLP;
        address ownerOfTapTokenId = IERC721(oTapAddress).ownerOf(removeAndRepayData.exitData.oTAPTokenID);
        require(ownerOfTapTokenId == user || ownerOfTapTokenId == address(this), "Magnetar: oTAPTokenID owner mismatch");
        if (ownerOfTapTokenId == user) {
            IERC721(oTapAddress).safeTransferFrom(user, address(this), removeAndRepayData.exitData.oTAPTokenID, "0x");
        }
        ITapiocaOptionsBroker(removeAndRepayData.exitData.target).exitPosition(removeAndRepayData.exitData.oTAPTokenID);
        if (!removeAndRepayData.unlockData.unlock) {
            IERC721(oTapAddress).safeTransferFrom(address(this), user, removeAndRepayData.exitData.oTAPTokenID, "0x");
        }
    }
    
    if (removeAndRepayData.unlockData.unlock) {
        if (removeAndRepayData.unlockData.tokenId != 0) {
            if (tOLPId != 0) {
                require(tOLPId == removeAndRepayData.unlockData.tokenId, "Magnetar: tOLPId mismatch");
            }
            tOLPId = removeAndRepayData.unlockData.tokenId;
        }
        ITapiocaOptionLiquidityProvision(removeAndRepayData.unlockData.target).unlock(tOLPId, externalData.singularity, user);
    }
}
```
