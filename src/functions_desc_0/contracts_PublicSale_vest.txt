This code snippet consists of a smart contract function named `vest` and a SafeMath library that provides safe arithmetic operations for uint256 variables. Let's break down the working process of the code:

1. `SafeMath` Library:
   - The `SafeMath` library contains functions for safe arithmetic operations like addition, subtraction, multiplication, and division on `uint256` variables.
   - The `sub` function is overloaded with two versions. The first version takes two `uint256` parameters `a` and `b` and returns the result of `a - b`. It includes a `require` statement to ensure that `b` is less than or equal to `a`. If the condition is not met, it reverts with the specified error message.
   - The second version of the `sub` function includes an additional parameter `errorMessage` to provide a custom error message in case of subtraction overflow.
   - The `mul` function performs multiplication of two `uint256` numbers `a` and `b`. It includes a check to prevent multiplication overflow by verifying that the result of the multiplication divided by `a` is equal to `b`.
   - The `div` function divides two `uint256` numbers `a` and `b`. It ensures that the divisor `b` is greater than zero to avoid division by zero error.

2. `vest` Function:
   - The `vest` function is defined in the smart contract and is marked as `external` and `payable`, meaning it can be called from outside the contract and can receive Ether along with the function call.
   - It takes three parameters: `_beneficiary` (address of the beneficiary), `_amount` (amount to be vested), and `_isRevocable` (a flag indicating if the vesting is revocable).
   - The function does not have a specific implementation in the provided code snippet, so the detailed working process of the `vest` function is not explicitly defined here.

In summary, the provided code snippet includes a SafeMath library with functions for safe arithmetic operations on `uint256` variables and a smart contract function `vest` that likely handles vesting of tokens or assets for a beneficiary. The `SafeMath` library ensures that arithmetic operations are performed safely to prevent overflow or underflow issues.